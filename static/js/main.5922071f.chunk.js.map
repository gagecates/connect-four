{"version":3,"sources":["components/row/Row.js","components/row/DropRow.js","utils/colorOptions.js","components/game/Game.js","utils/gameUtils.js","components/theme/Theme.js","assets/logo.png","App.js","index.js"],"names":["Row","row","colors","map","cell","i","value","columnIndex","Cell","color","Box","className","DropRow","playerColor","play","gameOver","board","DropCell","useState","hovered","setHovered","droppable","cellHovered","enabled","onMouseEnter","onMouseLeave","onClick","colorOptions","name","Game","initialGameState","player1","player1Color","player2","player2Color","player1Score","player2Score","currentPlayer","dropRow","gameStarted","message","useReducer","state","action","type","nextPlayer","player","Error","gameState","dispatchGameState","Typography","variant","gutterBottom","component","ToggleButtonGroup","exclusive","onChange","e","newAlignment","sx","marginBottom","ToggleButton","minWidth","marginRight","FormControl","fullWidth","InputLabel","id","Select","labelId","label","target","filter","index","MenuItem","Button","size","margin","style","backgroundColor","marginTop","col","deepCloneBoard","deepCloneDropRow","console","log","result","checkVertical","checkDiagonalRight","checkDiagonalLeft","checkHorizontal","checkDraw","checkForWin","theme","createTheme","palette","primary","light","main","dark","contrastText","secondary","App","src","Logo","alt","ThemeProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5922071f.chunk.js","sourcesContent":["import Box from '@mui/material/Box'\nimport '../game/Game.css'\n\n\nexport default function Row({ row, colors }){\n  return (\n    <tr>\n      {row && row.map((cell, i) => (\n        <Cell key={i} value={cell} columnIndex={i} colors={colors}/>\n      ))}\n    </tr>\n  )\n}\n\nconst Cell = ({ value, columnIndex, colors }) => {\n  let color = 'whiteCircle'\n\n  if (value === 1) { color = colors[0]}\n  else if (value === 2) { color = colors[1]}\n\n  return (\n    <td>\n      <Box\n        className={\"gameCell\"}\n      >\n        <div className={value ? `${color}Circle` : \"whiteCircle\"}></div>\n      </Box>\n    </td>\n  )\n}","import { useState } from 'react'\nimport Box from '@mui/material/Box'\nimport '../game/Game.css'\n\nexport default function DropRow({ row, playerColor, play, gameOver, board }){\n  // map each 7 cells of the drop row with default null values\n  return (\n    <tr>\n      {row && row.map((cell, i) => (\n        <DropCell key={i} columnIndex={i} playerColor={playerColor} play={play} gameOver={gameOver} board={board}/>\n      ))}\n    </tr>\n  )\n}\n\nconst DropCell = ({ columnIndex, playerColor, play, gameOver, board }) => {\n  // columnIndex is the index of top drop row\n  const [hovered, setHovered] = useState(null)\n  const droppable = !board[0][columnIndex]\n\n  const cellHovered = hovered === columnIndex\n  const enabled = !gameOver && droppable ? '' : 'disabled'\n\n  return (\n    <td>\n      <Box\n        className={\"dropCell\"}\n      >\n        <div\n          onMouseEnter={() => setHovered(columnIndex)}\n          onMouseLeave={() => setHovered(null)}\n          onClick={() => {play(columnIndex)}}\n          className={cellHovered && droppable ? `${playerColor}Circle` : 'whiteCircle' + ` ${enabled}`}\n        ></div>\n      </Box>\n    </td>\n  )\n}","export const colorOptions = [\n  {name: 'blue', value: 'blue'},\n  {name: 'red', value: 'red'},\n  {name: 'yellow', value: 'yellow'},\n  {name: 'green', value: 'green'},\n  {name: 'black', value: 'black'}\n]","import React, { useState } from 'react'\nimport Typography from '@mui/material/Typography'\nimport Box from '@mui/material/Box'\nimport Button from '@mui/material/Button'\nimport ToggleButton from '@mui/material/ToggleButton'\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup'\nimport InputLabel from '@mui/material/InputLabel'\nimport MenuItem from '@mui/material/MenuItem'\nimport FormControl from '@mui/material/FormControl'\nimport Select from '@mui/material/Select'\nimport { useReducer } from 'react'\nimport Row from '../row/Row'\nimport DropRow from '../row/DropRow'\nimport { checkForWin, deepCloneBoard, deepCloneDropRow } from '../../utils/gameUtils'\nimport { colorOptions } from '../../utils/colorOptions'\nimport './Game.css'\n\n\nexport default function Game() {\n\n  const gameReducer = (state, action) => {\n    switch (action.type) {\n      case 'newGame':\n        return {\n          ...state,\n          board: initialGameState.board,\n          gameOver: false,\n          currentPlayer: state.currentPlayer === 1 ? 2 : 1\n        }\n      case 'resetGame':\n        return {\n          ...initialGameState,\n          board: action.board,\n        }\n      case 'gameStarted':\n        return {\n          ...state,\n          board: initialGameState.board,\n          gameStarted: true,\n        }\n      case 'togglePlayer':\n        return {\n          ...state,\n          currentPlayer: action.nextPlayer,\n          board: action.board,\n        }\n      case 'currentPlayer':\n        return {\n          ...state,\n          currentPlayer: action.player,\n        }\n      case 'endGame':\n        return {\n          ...state,\n          gameOver: true,\n          message: action.message,\n          board: action.board,\n        }\n      case 'updateMessage':\n        return {\n          ...state,\n          message: action.message,\n        }\n      case 'updatePlayer1Color':\n        return {\n          ...state,\n          player1Color: action.color\n        }\n      case 'updatePlayer2Color':\n        return {\n          ...state,\n          player2Color: action.color\n        }\n      case 'incrementPlayer1Score':\n        return {\n          ...state,\n          player1Score: state.player1Score + 1\n        }\n      case 'incrementPlayer2Score':\n        return {\n          ...state,\n          player2Score: state.player2Score + 1\n        }\n      default:\n        throw Error(`Action \"${action.type}\" is not a valid action.`)\n    }\n  }\n\n  let initialGameState = {\n    player1: 1,\n    player1Color: null,\n    player2: 2,\n    player2Color: null,\n    player1Score: 0,\n    player2Score: 0,\n    currentPlayer: null,\n    board: [\n      [null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null],\n    ],\n    dropRow: [null, null, null, null, null, null, null],\n    gameStarted: false,\n    gameOver: false,\n    message: '',\n  }\n\n  const [gameState, dispatchGameState] = useReducer(\n    gameReducer,\n    initialGameState\n  )\n\n  const play = (col) => {\n    if (!gameState.gameOver) {\n      let board = deepCloneBoard(gameState.board)\n      let dropRow = deepCloneDropRow(gameState.dropRow)\n      //check if cell is taken by starting at the bottom row and working up\n      for (let row = 5; row >= 0; row--) {\n        if (!board[row][col]) {\n          board[row][col] = gameState.currentPlayer\n          console.log('breaking')\n          break\n        }\n      }\n      let result = checkForWin(board)\n      if (result === gameState.player1) {\n        dispatchGameState({\n          type: 'endGame',\n          message: `Player 1 (${gameState.player1Color}) wins!`,\n          board,\n        })\n        dispatchGameState({\n          type: 'incrementPlayer1Score',\n        })\n      } else if (result === gameState.player2) {\n        dispatchGameState({\n          type: 'endGame',\n          message: `Player 2 (${gameState.player2Color}) wins!`,\n          board,\n        })\n        dispatchGameState({\n          type: 'incrementPlayer2Score',\n        })\n      } else if (result === 'draw') {\n        dispatchGameState({\n          type: 'endGame',\n          message: 'Dang, a Tie!!!',\n          board,\n        })\n      } else {\n        const nextPlayer =\n          gameState.currentPlayer === gameState.player1\n            ? gameState.player2\n            : gameState.player1\n\n        dispatchGameState({ type: 'togglePlayer', nextPlayer, board, dropRow })\n      }\n    }\n    else {\n      dispatchGameState({\n        type: 'updateMessage',\n        message: 'Game Over. Please start a new game.',\n      })\n    }\n  }\n\n  const handleGameStart = () => {\n    dispatchGameState({\n      type: 'gameStarted',\n      gameStarted: true,\n    })\n  }\n\n  return (\n    <>\n      {!gameState.gameStarted && !gameState.gameOver && (\n        <>\n          <Typography variant=\"h5\" gutterBottom component=\"span\">Who wants to go first?</Typography>\n          <div className='flex-center'>\n            <ToggleButtonGroup\n              color=\"primary\"\n              value={gameState.currentPlayer}\n              exclusive\n              onChange={(e, newAlignment) => dispatchGameState({type: 'currentPlayer', player: newAlignment})}\n              sx={{ marginBottom: 5 }}\n            >\n              <ToggleButton value={1}>Player 1</ToggleButton>\n              <ToggleButton value={2}>Player 2</ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n          {gameState.currentPlayer && (\n            <>\n              <Typography variant=\"h5\" gutterBottom component=\"span\">Players pick your colors</Typography>\n              <div className=\"flex-row\">\n                <Box sx={{ minWidth: 120, marginRight: 3 }}>\n                  <FormControl fullWidth>\n                    <InputLabel id=\"select-label\">Player 1</InputLabel>\n                    <Select\n                      labelId=\"select-label\"\n                      id=\"simple-select\"\n                      value={gameState.player1Color || ''}\n                      label=\"Player 1\"\n                      onChange={(e) => dispatchGameState({type: 'updatePlayer1Color', color: e.target.value})}\n                    >\n                      {gameState.player2Color ? (\n                        colorOptions.filter(color => color.name !== gameState.player2Color).map((color, index) => (\n                          <MenuItem key={index} value={color.value}>{color.name}</MenuItem>\n                        ))\n                      )\n                      :\n                      colorOptions.map((color, index) => (\n                        <MenuItem key={index} value={color.value}>{color.name}</MenuItem>\n                      ))\n                      }\n                    </Select>\n                  </FormControl>\n                </Box>\n                <Box sx={{ minWidth: 120 }}>\n                  <FormControl fullWidth>\n                    <InputLabel id=\"select-label\">Player 2</InputLabel>\n                    <Select\n                      labelId=\"select-label\"\n                      id=\"simple-select\"\n                      value={gameState.player2Color || ''}\n                      label=\"Player 2\"\n                      onChange={(e) => dispatchGameState({type: 'updatePlayer2Color', color: e.target.value})}\n                    >\n                      {gameState.player1Color ? (\n                        colorOptions.filter(color => color.name !== gameState.player1Color).map((color, index) => (\n                          <MenuItem key={index} value={color.value}>{color.name}</MenuItem>\n                        ))\n                      )\n                      :\n                      colorOptions.map((color, index) => (\n                        <MenuItem key={index} value={color.value}>{color.name}</MenuItem>\n                      ))\n                      }\n                    </Select>\n                  </FormControl>\n                </Box>\n              </div>\n            </>\n          )}\n        </>\n      )}\n      {gameState.gameOver && (\n        <>\n          <Typography variant=\"h5\" gutterBottom component=\"span\">{gameState.message}</Typography>\n          <Button\n            onClick={() => dispatchGameState({type: 'newGame'})}\n            size='large'\n            variant='contained'>\n              Play again?\n          </Button>\n        </>\n      )}\n      {!gameState.gameStarted && !gameState.gameOver && gameState.player1Color && gameState.player2Color && (\n        <Button\n          onClick={handleGameStart}\n          size='large' sx={{ margin: 4 }}\n          variant='contained'>Start!\n        </Button>\n      )}\n      {gameState.gameStarted && (\n        <>\n          {!gameState.gameOver && (\n            <Typography\n              variant=\"h5\"\n              gutterBottom\n              component=\"span\"\n            >\n              Player {gameState.currentPlayer}, your turn!\n            </Typography>\n          )}\n          <div className=\"board-container fade-in-board flex-column\">\n            <table style={{ backgroundColor: 'white', marginTop: 10}}>\n              <tbody>\n                <DropRow\n                  row={gameState.dropRow}\n                  play={play}\n                  playerColor={gameState.currentPlayer === 1 ? gameState.player1Color : gameState.player2Color}\n                  gameOver={gameState.gameOver}\n                  board={gameState.board}\n                />\n              </tbody>\n            </table>\n            <table style={{ backgroundColor: 'black'}}>\n              <tbody>\n                {gameState.board && gameState.board.map((row, i) => (\n                  <Row key={i} row={row} colors={[gameState.player1Color, gameState.player2Color]}/>\n                ))}\n              </tbody>\n            </table>\n            <div className='board-base'/>\n            <div className=\"flex-row\">\n              <div className=\"score-box\">\n                <Typography variant=\"h5\" gutterBottom component=\"div\">Player 1</Typography>\n                <Typography variant=\"h5\" gutterBottom component=\"div\">{gameState.player1Score}</Typography>\n              </div>\n              <div className=\"score-box\">\n                <Typography variant=\"h5\" gutterBottom component=\"div\">Player 2</Typography>\n                <Typography variant=\"h5\" gutterBottom component=\"div\">{gameState.player2Score}</Typography>\n              </div>\n            </div>\n            {gameState.player1Score + gameState.player2Score >= 1 && (\n              <Button\n                onClick={() => dispatchGameState({type: 'resetGame'})}\n                size='large' sx={{ margin: 1 }}\n                variant='contained'\n              >\n                  Start over\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </>\n  )\n}\n","export const deepCloneBoard = (board) => [\n  [...board[0]],\n  [...board[1]],\n  [...board[2]],\n  [...board[3]],\n  [...board[4]],\n  [...board[5]],\n]\n\nexport const deepCloneDropRow = (row) => [\n  [...row]\n]\n\nconst checkVertical = (board) => {\n  // Check only if row is 3 or greater\n  for (let row = 3; row < 6; row++) {\n    for (let col = 0; col < 7; col++) {\n      if (board[row][col]) {\n        if (\n          board[row][col] === board[row - 1][col] &&\n          board[row][col] === board[row - 2][col] &&\n          board[row][col] === board[row - 3][col]\n        ) {\n          return board[row][col]\n        }\n      }\n    }\n  }\n}\n\nconst checkHorizontal = (board) => {\n  // Check only if column is 3 or less\n  for (let row = 0; row < 6; row++) {\n    for (let col = 0; col < 4; col++) {\n      if (board[row][col]) {\n        if (\n          board[row][col] === board[row][col + 1] &&\n          board[row][col] === board[row][col + 2] &&\n          board[row][col] === board[row][col + 3]\n        ) {\n          return board[row][col]\n        }\n      }\n    }\n  }\n}\n\nconst checkDiagonalRight = (board) => {\n  // Check only if row is 3 or greater AND column is 3 or less\n  for (let row = 3; row < 6; row++) {\n    for (let col = 0; col < 4; col++) {\n      if (board[row][col]) {\n        if (\n          board[row][col] === board[row - 1][col + 1] &&\n          board[row][col] === board[row - 2][col + 2] &&\n          board[row][col] === board[row - 3][col + 3]\n        ) {\n          return board[row][col]\n        }\n      }\n    }\n  }\n}\n\nconst checkDiagonalLeft = (board) => {\n  // Check only if row is 3 or greater AND column is 3 or greater\n  for (let row = 3; row < 6; row++) {\n    for (let col = 3; col < 7; col++) {\n      if (board[row][col]) {\n        if (\n          board[row][col] === board[row - 1][col - 1] &&\n          board[row][col] === board[row - 2][col - 2] &&\n          board[row][col] === board[row - 3][col - 3]\n        ) {\n          return board[row][col]\n        }\n      }\n    }\n  }\n}\n\nconst checkDraw = (board) => {\n  for (let row = 0; row < 6; row++) {\n    for (let col = 0; col < 7; col++) {\n      if (board[row][col] === null) {\n        return null\n      }\n    }\n  }\n  return 'draw'\n}\n\nexport const checkForWin = (board) => {\n  return (\n    checkVertical(board) ||\n    checkDiagonalRight(board) ||\n    checkDiagonalLeft(board) ||\n    checkHorizontal(board) ||\n    checkDraw(board)\n  )\n}","import { createTheme } from '@mui/material/styles'\n\nexport const theme = createTheme({\n  palette: {\n    primary: {\n      light: '#ba68c8',\n      main: '#6a1b9a',\n      dark: '#6a1b9a',\n      contrastText: '#fff',\n    },\n    secondary: {\n      light: '#64b5f6',\n      main: '#2196f3',\n      dark: '#0d47a1',\n      contrastText: '#000',\n    },\n  },\n})","export default __webpack_public_path__ + \"static/media/logo.e56d059e.png\";","import Game from './components/game/Game'\nimport { ThemeProvider } from '@mui/material/styles'\nimport { theme } from './components/theme/Theme'\nimport Logo from './assets/logo.png'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <img className=\"logo\" src={Logo} alt='Connect 4'/>\n      <ThemeProvider theme={theme}>\n        <Game/>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}